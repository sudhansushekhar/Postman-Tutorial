{
	"info": {
		"_postman_id": "5107f864-0bf0-494c-bdcb-84c4eb600710",
		"name": "Session5 Pre Request & Test/Post Request Script",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40918452"
	},
	"item": [
		{
			"name": "Get Users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"this is pre request script for\", pm.info.requestName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"this is post request script for\",pm.info.requestName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with a name string in a page",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  check response code using correct syntax\r",
							"pm.test(\"Response code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"A name is returned\", () => {\r",
							"    pm.expect(pm.response.json()).to.have.property('data');\r",
							"    pm.expect(pm.response.json().data[0]).to.have.property('first_name');\r",
							"    pm.expect(pm.response.json().data[0].first_name).to.be.a('string');\r",
							"})\r",
							"\r",
							"// check if the body contains a string\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Michael\");\r",
							"});\r",
							"\r",
							"// check if the body contains a string\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
							"});\r",
							"\r",
							"//check if first object in the data array has first_name equal to 'Michael'\r",
							"pm.test(\"Check for first name\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data[0].first_name).to.eql('Michael');\r",
							"});\r",
							"\r",
							"//check for response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//check if any object in the data array has first_name equal to 'Michael'\r",
							"pm.test(\"Check if any first_name is 'Michael'\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const hasMichael = jsonData.data.some(user => user.first_name === 'Michael');\r",
							"    pm.expect(hasMichael).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users?page=2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Validate Id of User with a name in a page",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  check response code using correct syntax\r",
							"pm.test(\"Response code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// check if the body contains a string\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Michael\");\r",
							"});\r",
							"\r",
							"//\r",
							"pm.test(\"check for Id\", () =>{\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data[3].first_name).to.eql('Byron');\r",
							"});\r",
							"\r",
							"pm.test(\"Validate that id 10 has last_name 'Fields'\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    // Find the object with id 10\r",
							"    const user = jsonData.data.find(user => user.id === 10);\r",
							"\r",
							"    // Ensure the object exists\r",
							"    pm.expect(user, \"User with id 10 not found\").to.exist;\r",
							"\r",
							"    // Validate the last_name is 'Fields'\r",
							"    pm.expect(user.last_name).to.eql(\"Fields\");\r",
							"});\r",
							"\r",
							"//to print variable in cosole\r",
							"pm.environment.set(\"newQApath\",\"https://google.co.in\");\r",
							"\r",
							"//to print variable in cosole\r",
							"console.log(pm.environment.get(\"urlQA\"));\r",
							"console.log(pm.environment.get(\"newQApath\"));\r",
							"pm.environment.unset(\"newQApath\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users?page=2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Users 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"console.log(\"this is pre request script at collection level\", pm.info.requestName)"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"console.log(\"this is post request script at collection level\", pm.info.requestName)"
				]
			}
		}
	]
}